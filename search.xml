<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分支规范</title>
      <link href="/2021/07/30/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/"/>
      <url>/2021/07/30/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<hr><h2><span id="分支规范"> 分支规范</span></h2><h4><span id="aoneflow一种-trunkbased-与-gitflow-的折衷方案"> AoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案</span></h4><h4><span id="三种分支类型"> 三种分支类型</span></h4><ul><li>主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。</li><li>发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push</li><li>特性分支 feature/001、feature/002<br>对应功能点分支。</li></ul><h4><span id="组成"> 组成</span></h4><p>一个master + N个 feature 分支 + N个 release 分支</p><h4><span id="工作流程"> 工作流程</span></h4><ol><li><p>开始工作前，从master 创建特性分支 feature/001，开始开发。</p></li><li><p>开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。</p></li><li><p>CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。</p></li><li><p>测试完毕后</p><ol><li>检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。</li><li>根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod</li></ol></li><li><p>使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。</p></li><li><p>上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。</p></li></ol><h4><span id="核心逻辑"> 核心逻辑</span></h4><p>任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。</p><h4><span id="小痛点"> 小痛点</span></h4><ul><li>提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request</li><li>这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。</li></ul><h4><span id="工具"> 工具</span></h4><ul><li>阿里巴巴内部使用aone平台管理，对外发布的产品叫 <a href="https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU">云效平台</a></li><li>有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路<br> <a href="https://tech.youzan.com/team/">3.4 公交车系统</a></li></ul><h4><span id="参考介绍"> 参考介绍：</span></h4><ul><li><a href="https://blog.csdn.net/bbcckkl/article/details/111087267">项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇</a></li><li><a href="https://blog.csdn.net/liumingzhe1/article/details/105287150">Git-flow分支管理与Aone-flow分支管理对比</a></li><li><a href="https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne">阿里巴巴如何管理代码分支？ </a></li><li><a href="http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf">阿里巴巴在DevOps实践中的创新和思考-ppt </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术规范 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API设计规范</title>
      <link href="/2021/07/30/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/API%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
      <url>/2021/07/30/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/API%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<hr><hr><h2><span id="api设计自查表"> API设计自查表</span></h2><table><thead><tr><th style="text-align:left">考虑点</th><th>结论</th></tr></thead><tbody><tr><td style="text-align:left">接口命名</td><td></td></tr><tr><td style="text-align:left">入参</td><td></td></tr><tr><td style="text-align:left">出参</td><td></td></tr><tr><td style="text-align:left">header</td><td></td></tr><tr><td style="text-align:left">包装结构体</td><td></td></tr><tr><td style="text-align:left">版本</td><td></td></tr><tr><td style="text-align:left">保障级别 （对内服务 or 对外服务 ｜ 使用人群）</td><td></td></tr><tr><td style="text-align:left">是否需要黑白名单，哪个位置加</td><td></td></tr><tr><td style="text-align:left">是否需要幂等，以及实现方案</td><td></td></tr><tr><td style="text-align:left">是否需要异步，以及实现方案</td><td></td></tr></tbody></table><hr><h2><span id="详细解释"> 详细解释</span></h2><h3><span id="标准接口命名"> 标准接口命名</span></h3><ul><li><p>范例：<br><code>xxx/user/p0/v1/getuserInfo</code><br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo</p></li><li><p>禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}</p></li><li><p>禁止，除了 get、post 以外的method，网关不好管理</p></li><li><p><strong>保护级别</strong></p><ul><li>p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口</li><li>p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。</li><li>p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。</li></ul></li><li><p>版本号</p><ul><li>使用v1、v2即可</li></ul></li></ul><h3><span id="header"> header</span></h3><ul><li><p>jwt</p></li><li><p>业务上下文，采集使用</p><p>如 user_id，client_id，client_type，biz，version，user_level，addr 等</p><p>按需添加</p></li><li><p>调用链，trace_id，span_id，</p><p>一般由工具生成。</p></li></ul><h3><span id="入参"> 入参</span></h3><ul><li><p>对外服务公共参数</p><ul><li>防篡改签名</li><li>加token</li></ul></li><li><p>对内服务公共参数</p><ul><li>user_id</li><li>biz_id</li><li>service_id</li></ul></li></ul><h3><span id="出参"> 出参</span></h3><ul><li><p>类型</p><p>强制使用 application/json 类型，尽量为字符串类型。</p><p>避免返回Long。</p></li><li><p>返回码</p><p>业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫&quot;收单接口&quot;，其内部调用&quot;下单&quot;接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，“收单正常，下单失败” 与 “收单失败”  返回不同的状态码</p></li><li><p>包装结构</p><p>错误返回：<code>&#123; code, msg, trace_id &#125;</code><br>正常返回：<code>&#123; code, msg, result: &#123;&#125; &#125;</code> <br>分页返回：<code>&#123; code, msg, result: &#123; recordList:[], page_info:&#123;&#125; &#125; &#125;</code><br><strong>result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量</strong></p></li></ul><h3><span id="实现幂等的策略"> 实现幂等的策略</span></h3><ul><li><p>唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）</p><p>可以加前置 缓存队列 ，进行专门的去重。</p></li><li><p>新增类接口，加唯一索引。（低并发下，实现最简单）</p></li><li><p>乐观锁字段。（效率最高，但大量并发时需要避免）</p></li><li><p>服务端发放提交票据，（两次交互，费时费力，不推荐）</p></li><li><p>状态机幂等， <code>set order_status = [done]</code> 天生幂等</p></li></ul><p>效率优先：乐观锁 &gt; 唯一约束 &gt; 唯一索引</p><h3><span id="异步策略"> 异步策略</span></h3><p>例如<strong>上传接口</strong></p><ul><li>同步</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> SyncUploadResponse <span class="hljs-title">syncUpload</span><span class="hljs-params">(SyncUploadRequest request)</span> </span>&#123;<br>  SyncUploadResponse response = <span class="hljs-keyword">new</span> SyncUploadResponse();<br>  response.setDownloadUrl(uploadFile(request.getFile()));<br>  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));<br>  <span class="hljs-keyword">return</span> response;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>异步上传，立即返回一个任务id，客户端根据任务id轮询结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">asyncDemo</span> </span>&#123;<br><br>    <span class="hljs-comment">//计数器，作为上传任务的ID</span><br>    <span class="hljs-keyword">private</span> AtomicInteger atomicInteger = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//暂存上传操作的结果，生产代码需要考虑数据持久化</span><br>    <span class="hljs-keyword">private</span> ConcurrentHashMap&lt;String, SyncQueryUploadTaskResponse&gt; downloadUrl = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();<br><br>    <span class="hljs-comment">// 立即返回任务id</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AsyncUploadResponse <span class="hljs-title">asyncUpload</span><span class="hljs-params">(AsyncUploadRequest request)</span> </span>&#123;<br>        AsyncUploadResponse response = <span class="hljs-keyword">new</span> AsyncUploadResponse();<br>        <span class="hljs-comment">//生成唯一的上传任务ID</span><br>        String taskId = <span class="hljs-string">&quot;upload&quot;</span> + atomicInteger.incrementAndGet<br>        <span class="hljs-comment">//异步上传操作只返回任务ID</span><br>        response.setTaskId(taskId);<br>        <span class="hljs-comment">//提交上传原始文件操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadFile(request.getFile());<br>            <span class="hljs-comment">//如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse</span><br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class="hljs-keyword">new</span> SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);<br>        &#125;);<br><br>        <span class="hljs-comment">//提交上传缩略图操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadThumbnailFile(request.getFile());<br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class="hljs-keyword">new</span> SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术规范 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql开发规范</title>
      <link href="/2021/07/27/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2021/07/27/%E6%8A%80%E6%9C%AF%E8%A7%84%E8%8C%83/mysql%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<hr><p>[TOC]</p><h2><span id="建表规范"> <strong>建表规范</strong></span></h2><ol><li>默认使用使用innoDB 引擎，字符集 utf8mb4</li><li>表名称规范<br><code>[biz]_xxxx_[app|mis]_conf</code> : 在线、离线服务配置。 <br><code>[biz]_xxxx_record</code> : 数据表，最高优先级。<br><code>[biz]_xxxx_[app|mis]log</code> : 日志表，低优先级</li><li>所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime</li><li>字段最大长度，保存克制，防止建索引时空间不够。</li><li>字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。</li><li>表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint</li><li>日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键</li><li>字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time</li><li>保留名称，show、update、desc、status、range、match、delayed</li><li>推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g</li></ol><h2><span id="索引规范"> <strong>索引规范</strong></span></h2><ol><li><p>联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则</p></li><li><p>对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引</p></li><li><p>根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx</p></li><li><p>order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作</p></li><li><p>业务上的全局唯一字段，需要建立唯一索引</p></li><li><p>事物中，如 SELECT * FROM yes WHERE name =‘yes’ FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。</p></li></ol><h2><span id="sql开发规范"> <strong>SQL开发规范</strong></span></h2><ol><li><p>对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。</p></li><li><p>强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。</p></li><li><p>对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。</p></li><li><p>推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。</p></li><li><p>事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。</p></li><li><p>超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tables <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>( <span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tables <span class="hljs-keyword">where</span> [条件]  <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> xxx limie <span class="hljs-number">10000</span>,<span class="hljs-number">10</span> )<br><span class="hljs-keyword">using</span> id;<br></code></pre></div></td></tr></table></figure></li></ol><h2><span id="分库分表后查询规范"> <strong>分库分表后查询规范</strong></span></h2><ul><li>禁用语句</li></ul><ol><li>分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。</li><li>禁止，子查询，group by，order by</li><li>禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。</li><li>禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。</li><li>禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 技术规范 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
